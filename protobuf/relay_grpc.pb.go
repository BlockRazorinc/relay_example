// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: relay.proto

package grpcServer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GatewayClient is the client API for Gateway service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GatewayClient interface {
	SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxReply, error)
	SendTxs(ctx context.Context, in *SendTxsRequest, opts ...grpc.CallOption) (*SendTxsReply, error)
	NewTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (Gateway_NewTxsClient, error)
	NewBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (Gateway_NewBlocksClient, error)
}

type gatewayClient struct {
	cc grpc.ClientConnInterface
}

func NewGatewayClient(cc grpc.ClientConnInterface) GatewayClient {
	return &gatewayClient{cc}
}

func (c *gatewayClient) SendTx(ctx context.Context, in *SendTxRequest, opts ...grpc.CallOption) (*SendTxReply, error) {
	out := new(SendTxReply)
	err := c.cc.Invoke(ctx, "/blockchain.Gateway/SendTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) SendTxs(ctx context.Context, in *SendTxsRequest, opts ...grpc.CallOption) (*SendTxsReply, error) {
	out := new(SendTxsReply)
	err := c.cc.Invoke(ctx, "/blockchain.Gateway/SendTxs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gatewayClient) NewTxs(ctx context.Context, in *TxsRequest, opts ...grpc.CallOption) (Gateway_NewTxsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[0], "/blockchain.Gateway/NewTxs", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayNewTxsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_NewTxsClient interface {
	Recv() (*TxsReply, error)
	grpc.ClientStream
}

type gatewayNewTxsClient struct {
	grpc.ClientStream
}

func (x *gatewayNewTxsClient) Recv() (*TxsReply, error) {
	m := new(TxsReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *gatewayClient) NewBlocks(ctx context.Context, in *BlocksRequest, opts ...grpc.CallOption) (Gateway_NewBlocksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gateway_ServiceDesc.Streams[1], "/blockchain.Gateway/NewBlocks", opts...)
	if err != nil {
		return nil, err
	}
	x := &gatewayNewBlocksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gateway_NewBlocksClient interface {
	Recv() (*BlocksReply, error)
	grpc.ClientStream
}

type gatewayNewBlocksClient struct {
	grpc.ClientStream
}

func (x *gatewayNewBlocksClient) Recv() (*BlocksReply, error) {
	m := new(BlocksReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GatewayServer is the server API for Gateway service.
// All implementations must embed UnimplementedGatewayServer
// for forward compatibility
type GatewayServer interface {
	SendTx(context.Context, *SendTxRequest) (*SendTxReply, error)
	SendTxs(context.Context, *SendTxsRequest) (*SendTxsReply, error)
	NewTxs(*TxsRequest, Gateway_NewTxsServer) error
	NewBlocks(*BlocksRequest, Gateway_NewBlocksServer) error
	mustEmbedUnimplementedGatewayServer()
}

// UnimplementedGatewayServer must be embedded to have forward compatible implementations.
type UnimplementedGatewayServer struct {
}

func (UnimplementedGatewayServer) SendTx(context.Context, *SendTxRequest) (*SendTxReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTx not implemented")
}
func (UnimplementedGatewayServer) SendTxs(context.Context, *SendTxsRequest) (*SendTxsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTxs not implemented")
}
func (UnimplementedGatewayServer) NewTxs(*TxsRequest, Gateway_NewTxsServer) error {
	return status.Errorf(codes.Unimplemented, "method NewTxs not implemented")
}
func (UnimplementedGatewayServer) NewBlocks(*BlocksRequest, Gateway_NewBlocksServer) error {
	return status.Errorf(codes.Unimplemented, "method NewBlocks not implemented")
}
func (UnimplementedGatewayServer) mustEmbedUnimplementedGatewayServer() {}

// UnsafeGatewayServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GatewayServer will
// result in compilation errors.
type UnsafeGatewayServer interface {
	mustEmbedUnimplementedGatewayServer()
}

func RegisterGatewayServer(s grpc.ServiceRegistrar, srv GatewayServer) {
	s.RegisterService(&Gateway_ServiceDesc, srv)
}

func _Gateway_SendTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SendTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.Gateway/SendTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SendTx(ctx, req.(*SendTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_SendTxs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendTxsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GatewayServer).SendTxs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/blockchain.Gateway/SendTxs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GatewayServer).SendTxs(ctx, req.(*SendTxsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gateway_NewTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).NewTxs(m, &gatewayNewTxsServer{stream})
}

type Gateway_NewTxsServer interface {
	Send(*TxsReply) error
	grpc.ServerStream
}

type gatewayNewTxsServer struct {
	grpc.ServerStream
}

func (x *gatewayNewTxsServer) Send(m *TxsReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Gateway_NewBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BlocksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GatewayServer).NewBlocks(m, &gatewayNewBlocksServer{stream})
}

type Gateway_NewBlocksServer interface {
	Send(*BlocksReply) error
	grpc.ServerStream
}

type gatewayNewBlocksServer struct {
	grpc.ServerStream
}

func (x *gatewayNewBlocksServer) Send(m *BlocksReply) error {
	return x.ServerStream.SendMsg(m)
}

// Gateway_ServiceDesc is the grpc.ServiceDesc for Gateway service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gateway_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "blockchain.Gateway",
	HandlerType: (*GatewayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTx",
			Handler:    _Gateway_SendTx_Handler,
		},
		{
			MethodName: "SendTxs",
			Handler:    _Gateway_SendTxs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "NewTxs",
			Handler:       _Gateway_NewTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "NewBlocks",
			Handler:       _Gateway_NewBlocks_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "relay.proto",
}
